name: cbl-dll

on:
  workflow_call:
    inputs:
      bitness:
        default: 64bits
        required: false
        type: string
    secrets:
      PAT:
        required: true

jobs:
  Windows:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        build-type: ["Debug", "Release"]
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          if [ "${{ inputs.bitness }}" == "64bits" ]
          then
            echo "::set-output name=msystem::MINGW64"
            echo "::set-output name=arch::x86_64"
            echo "::set-output name=artifact::libcbl-win64"
          else
            echo "::set-output name=msystem::MINGW32"
            echo "::set-output name=arch::i686"
            echo "::set-output name=artifact::libcbl-win32"
          fi
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: fragcolor-xyz/chainblocks
          token: ${{ secrets.PAT }}
          fetch-depth: 1
          submodules: recursive
      - name: Set up rust
        env:
          RUSTUP_USE_CURL: 1
        run: |
          rustup update
          rustup toolchain install nightly
          rustup +nightly target add ${{ steps.setup.outputs.arch }}-pc-windows-gnu
      - name: Set up 32-bits
        env:
          RUSTUP_USE_CURL: 1
        if: ${{ inputs.bitness == '32bits' }}
        shell: bash
        run: |
          # Native libClang required for rust bindgen
          # choco exit with code 1 after successful install
          choco install -y --force llvm || exit 0
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" >> $GITHUB_ENV
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ steps.setup.outputs.msystem }}
          release: false
          path-type: inherit
          install: >-
            base-devel
            mingw-w64-${{ steps.setup.outputs.arch }}-toolchain
            mingw-w64-${{ steps.setup.outputs.arch }}-cmake
            mingw-w64-${{ steps.setup.outputs.arch }}-ninja
            mingw-w64-${{ steps.setup.outputs.arch }}-clang
            mingw-w64-${{ steps.setup.outputs.arch }}-lld
            wget
      - name: Build
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
         ./bootstrap
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DUSE_LIBBACKTRACE=0 -DSKIP_RUST_BINDGEN=${{ inputs.bitness == '32bits' }} ..
          ninja cbl-dll
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.setup.outputs.artifact }}-${{ matrix.build-type }}
          path: build/libcbl.dll
          if-no-files-found: error
