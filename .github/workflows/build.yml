name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  #
  # Build claymore library
  #
  claymore-library-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build-type: ["Debug", "Release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Build
        run: |
          dotnet build src/Fragcolor.Shards.Claymore -c ${{ matrix.build-type }}
      - name: Upload artifact
        if: ${{ matrix.build-type == 'Release' }}
        uses: actions/upload-artifact@v2
        with:
          name: claymore-library-build ${{ matrix.build-type }}
          path: |
            src/Fragcolor.Shards.Claymore/bin/${{ matrix.build-type }}/*.nupkg
            src/Fragcolor.Shards.Claymore/bin/${{ matrix.build-type }}/*.snupkg
          if-no-files-found: error

  #
  # Build common library
  #
  common-library-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build-type: ["Debug", "Release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Build
        run: |
          dotnet build src/Fragcolor.Shards.Common -c ${{ matrix.build-type }}
      - name: Upload artifact
        if: ${{ matrix.build-type == 'Release' }}
        uses: actions/upload-artifact@v2
        with:
          name: common-library-build ${{ matrix.build-type }}
          path: |
            src/Fragcolor.Shards.Common/bin/${{ matrix.build-type }}/*.nupkg
            src/Fragcolor.Shards.Common/bin/${{ matrix.build-type }}/*.snupkg
          if-no-files-found: error

  #
  # Build shards dll (native)
  #
  libshards-build-Debug:
    uses: fragcolor-xyz/shards/.github/workflows/build-windows.yml@devel
    secrets: inherit
    with:
      bitness: 64bits
      build-type: Debug
      binary-type: Library
  libshards-build-Release:
    uses: fragcolor-xyz/shards/.github/workflows/build-windows.yml@devel
    secrets: inherit
    with:
      bitness: 64bits
      build-type: Release
      binary-type: Library

  #
  # Build claymore dll (native)
  #
  libclaymore-build:
    uses: ./.github/workflows/claymore.yml
    secrets: inherit
    with:
      bitness: 64bits

  #
  # Test common library
  #
  common-library-test:
    needs: [libshards-build-Debug, libshards-build-Release, libclaymore-build]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build-type: ["Debug", "Release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Set up MSYS2 (Release)
        if: ${{ matrix.build-type == 'Release' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: false
          path-type: inherit
      - name: Set up MSYS2 (Debug)
        if: ${{ matrix.build-type == 'Debug' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: false
          path-type: inherit
          install: >-
            mingw-w64-x86_64-boost
      - name: Download libshards
        uses: actions/download-artifact@v2
        with:
          name: libshards-win64 ${{ matrix.build-type }}
          path: src/lib
      - name: Download libclaymore
        uses: actions/download-artifact@v2
        with:
          name: libclaymore-win64 ${{ matrix.build-type }}
          path: src/lib
      - name: Test
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd src
          dotnet test -c ${{ matrix.build-type }} -f:net48 -p:CollectCoverage=true -p:CoverletOutput=../coverage/ -p:CoverletOutputFormat=\"json,lcov\" -p:MergeWith=../coverage/coverage.net48.json
          dotnet test -c ${{ matrix.build-type }} -f:net6.0 -p:CollectCoverage=true -p:CoverletOutput=../coverage/ -p:CoverletOutputFormat=\"json,lcov\" -p:MergeWith=../coverage/coverage.net6.0.json
      - name: Coverage (Debug)
        if: ${{ matrix.build-type == 'Debug' }}
        uses: codecov/codecov-action@v2
        with:
          directory: ./src/coverage/
          files: coverage.*.info
          fail_ci_if_error: true
      - name: Upload coverage
        if: ${{ matrix.build-type == 'Debug' }}
        uses: actions/upload-artifact@v2
        with:
          name: common-library-coverage ${{ matrix.build-type }}
          path: src/coverage/
          if-no-files-found: error

  #
  # Build Godot sample
  #
  godot-sample-build:
    needs: common-library-build
    runs-on: ubuntu-latest
    env:
      GODOT_VERSION: 3.4.2
      RELEASE_NAME: stable
    container:
      image: barichello/godot-ci:mono-3.4.2
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Setup nuget
        uses: nuget/setup-nuget@v1
      - name: Setup nuget local source
        run: |
          nuget source add -source "`pwd`/Nuget_Source" -name "Local"
      - name: Setup godot
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.${RELEASE_NAME}.mono ~/.local/share/godot/templates/${GODOT_VERSION}.${RELEASE_NAME}.mono
      - name: Download common library
        uses: actions/download-artifact@v2
        with:
          name: common-library-build Release
          path: Nuget_Source
      - name: Build
        run: |
          mkdir -v -p build/Windows
          cd Godot
          godot -v --export "Windows Desktop" ../build/Windows/Godot.exe
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Godot-build
          path: build/Windows/

  #
  # Build Monogame sample
  #
  monogame-sample-build:
    needs: common-library-build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.1.x
            6.0.x
      - name: Setup nuget local source
        run: |
          dotnet nuget add source "${{ github.workspace }}\Nuget_Source" -n "Local"
      - name: Download common library
        uses: actions/download-artifact@v2
        with:
          name: common-library-build Release
          path: Nuget_Source
      - name: Build
        run: |
          dotnet build Monogame/MyGame.sln -c Release
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Monogame-build
          path: |
            Monogame/bin/Release/
          if-no-files-found: error

  #
  # Build Stride sample
  #
  stride-sample-build:
    needs: common-library-build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            5.0.x
            6.0.x
      - name: Setup nuget local source
        run: |
          dotnet nuget add source "https://packages.stride3d.net/nuget" -n "Stride"
          dotnet nuget add source "${{ github.workspace }}\Nuget_Source" -n "Local"
      - name: Download common library
        uses: actions/download-artifact@v2
        with:
          name: common-library-build Release
          path: Nuget_Source
      - name: Build
        run: |
          dotnet build Stride/MyGame.sln -c Release --no-self-contained
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Stride-build
          path: |
            Stride/Bin/
          if-no-files-found: error

  #
  # Build Unity project
  #
  unity-build:
    needs: [common-library-build, claymore-library-build]
    runs-on: ubuntu-latest
    container:
      image: unityci/editor:2020.3.26f1-windows-mono-0
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Activate Unity license
        run: ./scripts/activate-unity-license.sh
      - name: Download claymore library
        uses: actions/download-artifact@v2
        with:
          name: claymore-library-build Release
          path: packages
      - name: Download common library
        uses: actions/download-artifact@v2
        with:
          name: common-library-build Release
          path: packages
      - name: Setup dependencies
        run: |
          apt-get update
          apt-get install -y unzip
          curl -L https://www.nuget.org/api/v2/package/System.Runtime.CompilerServices.Unsafe -o packages/System.Runtime.CompilerServices.Unsafe.nupkg
          unzip -p packages/System.Runtime.CompilerServices.Unsafe.nupkg lib/netstandard2.0/*.dll > Unity/Packages/com.fragcolor.shards/Runtime/Plugins/System.Runtime.CompilerServices.Unsafe.dll
          unzip -p packages/Fragcolor.Shards.Common.*.nupkg lib/netstandard2.0/*.dll > Unity/Packages/com.fragcolor.shards/Runtime/Plugins/Fragcolor.Shards.Common.dll
          unzip -p packages/Fragcolor.Shards.Claymore.*.nupkg lib/netstandard2.0/*.dll > Unity/Packages/com.fragcolor.shards/Editor/Plugins/Fragcolor.Shards.Claymore.dll
      - uses: actions/cache@v2
        with:
          path: Unity/Library
          key: Unity-Library-${{ hashFiles('Unity/Assets/**', 'Unity/Packages/**', 'Unity/ProjectSettings/**') }}
          restore-keys: |
            Unity-Library-
      - name: Build project
        run: |
          unity-editor -quit -logFile /dev/stdout -projectPath Unity -buildWindows64Player build/MyGame.exe
      - uses: actions/upload-artifact@v2
        with:
          name: Unity-build
          path: Unity/build/
