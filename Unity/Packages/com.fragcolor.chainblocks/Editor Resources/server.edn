(do
  (def headers-self {"Cross-Origin-Opener-Policy" "same-origin"
                     "Cross-Origin-Embedder-Policy" "require-corp"})
  (def headers-embed {"X-Frame-Options" ""
                      "Access-Control-Allow-Origin" "*"})
  (def headers headers-self)
  (defloop main
    (Setup
     (Sequence .list :Global true :Types Type.String))
    (Http.Server
     :Port 7070
     :Handler
     (Chain
      "handler" :Looped
      (Http.Read) = .request
      (Take "target") >= .target (Log "target")

      (Regex.Search #"(.*)\?") >= .matches
      (Count .matches) (When (Is 2) (-> .matches (Take 1) > .target))

      .target ;;(Log "target")
      (Match
       ["/" (-> "/Store/index.html" (Http.SendFile headers))
        "/landingPage" (-> "/Store/index.html" (Http.SendFile headers))
        "/home-creator-store" (-> "/Store/index.html" (Http.SendFile headers))
        nil (-> (Regex.Search #"/download/(.*)") > .matches
                (Count .matches)
                (If (Is 2)
                    (-> .matches (Take 1) (Push .list :Global true) .list
                        "ok" (Http.Response 200))
                    (-> "/Store" (PrependTo .target)
                        .target (Http.SendFile headers))))])))
    (When (-> (Count .list) (IsMore 0))
          (-> (Clear .result)
              .list (ForEach (Push .result))
              .result (Log "result")
              (Clear .list)))
    )
)
